// $Id: calcul.cup 505 2017-09-25 12:44:47Z coelho $

import java_cup.runtime.*;
import java.util.*;
import java.io.*;
import java.lang.Math;


parser code {:
  public static void main(String args[]) throws Exception {
    new Parser(new Lexer(new InputStreamReader(System.in))).parse();
  }
:}

action code {:
  Map<String,Double> varMap = new HashMap<String,Double>();  
  static String TRUE = new String("true");
  static String FALSE = new String("false");
  static double ONE = 1.0d;
  static double ZERO = 0.0d;
:}

init with {:
  //varMap.put("true", 1.0d);
  //varMap.put("false", 0.0d);
:}


// definition des token
terminal TK_PLUS, TK_MINUS, TK_MULT, TK_DIV, TK_UMINUS, TK_DONE, TK_OPBRA, TK_CLBRA, TK_SIN, TK_COS, TK_TAN, TK_SQRT, TK_LN, TK_EXP, TK_POW, TK_ASSIGN, TK_ALLVAR, TK_AND, TK_OR, TK_NOT, TK_SUP, TK_SUPEQ, TK_LOW, TK_LOWEQ, TK_EQUAL, TK_EXIT, TK_CONDI, TK_CONDI2;
terminal Double TK_VAL, TK_PI, TK_E; 
terminal String TK_ID;

// definition des etats intermediaires
non terminal commandes, commande;
non terminal Double expression;
non terminal String assignation;

// associativite et priorite des operateurs
precedence left TK_ASSIGN;
precedence left TK_PLUS, TK_MINUS, TK_AND, TK_OR;
precedence left TK_MULT, TK_DIV, TK_NOT, TK_SUP, TK_SUPEQ, TK_LOW, TK_LOWEQ, TK_EQUAL;
precedence left TK_UMINUS;
precedence left TK_OPBRA, TK_SIN, TK_COS, TK_TAN, TK_SQRT, TK_LN, TK_EXP, TK_POW, TK_EXIT, TK_CONDI;
precedence right TK_CLBRA;

// objectif
start with commandes;

commandes ::=
    commande
  | commandes commande
  | error
  {: System.out.println("Expression incorrecte"); :}
    TK_DONE
;

commande ::=
    expression:e // expression seule, affichage
	{: System.out.println("# " + e); :}
    TK_DONE
  | assignation:a // assignation d'une valeur à une variable, seule, pios message de confirmation
  {: System.out.println("# " + a); :}
    TK_DONE
  | TK_ALLVAR
  {:  
    long i=0;
    Iterator<Map.Entry<String,Double>> it = varMap.entrySet().iterator();
    if(!it.hasNext()){
      System.out.println("Aucune variable définie");
    }
    while(it.hasNext()){
      Map.Entry<String,Double> pair = it.next();
      System.out.println("# " + pair.getKey() + " = " + pair.getValue());
    }
  :}
    TK_DONE
  | TK_EXIT
  {:
    System.exit(0);
  :}
    TK_DONE
;

expression ::=
    expression:e1 TK_PLUS expression:e2 // effectue l'addition
	{: RESULT = e1 + e2 ; :}
  | expression:e1 TK_MINUS expression:e2 // effectue la soustraction
  {: RESULT = e1 - e2 ; :}
  | expression:e1 TK_MULT expression:e2 // effectue la multiplication
  {: RESULT = e1 * e2 ; :}
  | expression:e1 TK_DIV expression:e2 // effectue la division
  {: RESULT = e1 / e2 ; :}
  | TK_UMINUS expression:e1 // moins unaire
  {: RESULT = -e1 ; :}
  | TK_SIN TK_OPBRA expression:e1 TK_CLBRA // évalue le sinus de l'expression entre parenthèses
  {: RESULT = Math.sin(e1); :}
  | TK_COS TK_OPBRA expression:e1 TK_CLBRA // évalue le cosinus de l'expression entre parenthèses
  {: RESULT = Math.cos(e1); :}
  | TK_TAN TK_OPBRA expression:e1 TK_CLBRA // évalue la tangente de l'expression entre parenthèses
  {: RESULT = Math.tan(e1); :}
  | TK_SQRT TK_OPBRA expression:e1 TK_CLBRA // évalue la racine de l'expression entre parenthèses
  {: RESULT = Math.sqrt(e1); :}
  | TK_LN TK_OPBRA expression:e1 TK_CLBRA // évalue le log népérien de l'expression entre parenthèses
  {: RESULT = Math.log(e1); :}
  | TK_EXP TK_OPBRA expression:e1 TK_CLBRA // évalue l'exponentielle de l'expression entre parenthèses
  {: RESULT = Math.exp(e1); :}
  | expression:e1 TK_POW expression:e2 // effectue l'exponentiation
  {: RESULT = Math.pow(e1,e2); :}
  | TK_OPBRA expression:e1 TK_CLBRA // évalue l'expression entre parenthèses
  {: RESULT = e1 ; :}
  | TK_VAL:v // valeur
	{: RESULT = v; :}
  | TK_ID:x // valeur de la variable
  {: 
    if(varMap.containsKey(x)){
      RESULT = varMap.get(x) ;
    } else {
      System.out.println("# " + x + " n'est pas défini");
    }
  :}
  | TK_PI // évalue pi
  {: RESULT = Math.PI; :}
  | TK_E // évalue e
  {: RESULT = Math.E; :}
  | expression:e1 TK_AND expression:e2 // et logique
  {: 
    if(e1==1.0 && e2==1.0){
      RESULT = 1.0;
    } else {
      RESULT = 0.0;
    }
  :}
  | expression:e1 TK_OR expression:e2 // ou logique
  {:
    if(e1==1 || e2==1){
      RESULT = 1.0;
    } else {
      RESULT = 0.0;
    }
  :}
  | TK_NOT expression:e1 // non logique
  {:
    if(e1==1){
      RESULT = 0.0;
    } else {
      RESULT = 1.0;
    }
  :}
  | expression:e1 TK_SUP expression:e2
  {:
    if(e1 > e2) {
      RESULT = 1.0;
    } else {
      RESULT = 0.0;
    }
  :}
  | expression:e1 TK_SUPEQ expression:e2
  {:
    if(e1 >= e2) {
      RESULT = 1.0;
    } else {
      RESULT = 0.0;
    }
  :}
  | expression:e1 TK_LOW expression:e2
  {:
    if(e1 < e2) {
      RESULT = 1.0;
    } else {
      RESULT = 0.0;
    }
  :}
  | expression:e1 TK_LOWEQ expression:e2
  {:
    if(e1 <= e2) {
      RESULT = 1.0;
    } else {
      RESULT = 0.0;
    }
  :}
  | expression:e1 TK_EQUAL expression:e2
  {:
    if(e1.equals(e2)) {
      RESULT = 1.0;
    } else {
      RESULT = 0.0;
    }
  :}
  | expression:e1 TK_CONDI expression:e2 TK_CONDI2 expression:e3
  {:
    if(e1.equals(1.0)) {
      RESULT = e2;
    } else {
      RESULT = e3;
    }
  :}
;

assignation ::=
    TK_ID:x TK_ASSIGN expression:e1
  {: varMap.put(x, e1);
  RESULT = x + " = " + e1 ; :}
;
