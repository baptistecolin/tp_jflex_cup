// $Id: calcul.cup 505 2017-09-25 12:44:47Z coelho $

import java_cup.runtime.*;
import java.util.*;
import java.io.*;
import java.lang.Math;

parser code {:
  public static void main(String args[]) throws Exception {
    new Parser(new Lexer(new InputStreamReader(System.in))).parse();
  }
:}

// definition des token
terminal TK_PLUS, TK_MINUS, TK_MULT, TK_DIV, TK_UMINUS, TK_DONE, TK_OPBRA, TK_CLBRA, TK_SIN, TK_COS, TK_TAN, TK_SQRT, TK_LN, TK_EXP, TK_POW;
terminal Double TK_VAL, TK_PI, TK_E; 

// definition des etats intermediaires
non terminal commandes, commande;
non terminal Double expression;

// associativite et priorite des operateurs
precedence left TK_PLUS, TK_MINUS;
precedence left TK_MULT, TK_DIV;
precedence left TK_UMINUS;
precedence left TK_OPBRA, TK_SIN, TK_COS, TK_TAN, TK_SQRT, TK_LN, TK_EXP, TK_POW;
precedence right TK_CLBRA;

// objectif
start with commandes;

commandes ::=
    commande
  | commandes commande
;

commande ::=
    expression:e // expression seule, affichage
	{: System.out.println("# " + e); :}
    TK_DONE
;

expression ::=
    expression:e1 TK_PLUS expression:e2 // effectue l'addition
	{: RESULT = e1 + e2 ; :}
  | expression:e1 TK_MINUS expression:e2 // effectue la soustraction
  {: RESULT = e1 - e2 ; :}
  | expression:e1 TK_MULT expression:e2 // effectue la multiplication
  {: RESULT = e1 * e2 ; :}
  | expression:e1 TK_DIV expression:e2 // effectue la division
  {: RESULT = e1 / e2 ; :}
  | TK_UMINUS expression:e1 // moins unaire
  {: RESULT = -e1 ; :}
  | TK_SIN TK_OPBRA expression:e1 TK_CLBRA // évalue le sinus de l'expression entre parenthèses
  {: RESULT = Math.sin(e1); :}
  | TK_COS TK_OPBRA expression:e1 TK_CLBRA // évalue le cosinus de l'expression entre parenthèses
  {: RESULT = Math.cos(e1); :}
  | TK_TAN TK_OPBRA expression:e1 TK_CLBRA // évalue la tangente de l'expression entre parenthèses
  {: RESULT = Math.tan(e1); :}
  | TK_SQRT TK_OPBRA expression:e1 TK_CLBRA // évalue la racine de l'expression entre parenthèses
  {: RESULT = Math.sqrt(e1); :}
  | TK_LN TK_OPBRA expression:e1 TK_CLBRA // évalue le log népérien de l'expression entre parenthèses
  {: RESULT = Math.log(e1); :}
  | TK_EXP TK_OPBRA expression:e1 TK_CLBRA // évalue l'exponentielle de l'expression entre parenthèses
  {: RESULT = Math.exp(e1); :}
  | expression:e1 TK_POW expression:e2 // effectue l'exponentiation
  {: RESULT = Math.pow(e1,e2); :}
  | TK_OPBRA expression:e1 TK_CLBRA // évalue l'expression entre parenthèses
  {: RESULT = e1 ; :}
  | TK_VAL:v // valeur
	{: RESULT = v; :}
  | TK_PI // évalue pi
  {: RESULT = Math.PI; :}
  | TK_E // évalue e
  {: RESULT = Math.E; :}
;
