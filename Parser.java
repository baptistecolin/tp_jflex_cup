
//----------------------------------------------------
// The following code was generated by CUP v0.11a beta 20060608
// Wed Sep 27 09:32:34 CEST 2017
//----------------------------------------------------

import java_cup.runtime.*;
import java.util.*;
import java.io.*;
import java.lang.Math;

/** CUP v0.11a beta 20060608 generated parser.
  * @version Wed Sep 27 09:32:34 CEST 2017
  */
public class Parser extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public Parser() {super();}

  /** Constructor which sets the default scanner. */
  public Parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public Parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\043\000\002\002\004\000\002\002\003\000\002\002" +
    "\004\000\002\006\002\000\002\003\005\000\002\007\002" +
    "\000\002\003\005\000\002\010\002\000\002\003\005\000" +
    "\002\004\005\000\002\004\005\000\002\004\005\000\002" +
    "\004\005\000\002\004\004\000\002\004\006\000\002\004" +
    "\006\000\002\004\006\000\002\004\006\000\002\004\006" +
    "\000\002\004\006\000\002\004\005\000\002\004\005\000" +
    "\002\004\003\000\002\004\003\000\002\004\003\000\002" +
    "\004\003\000\002\004\005\000\002\004\005\000\002\004" +
    "\004\000\002\004\005\000\002\004\005\000\002\004\005" +
    "\000\002\004\005\000\002\004\005\000\002\005\005" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\114\000\036\010\016\012\024\014\015\015\020\016" +
    "\007\017\010\020\017\021\004\024\013\027\022\035\014" +
    "\036\006\037\023\040\025\001\002\000\004\012\114\001" +
    "\002\000\004\011\ufffc\001\002\000\036\004\uffe9\005\uffe9" +
    "\006\uffe9\007\uffe9\011\uffe9\013\uffe9\022\uffe9\025\uffe9\026" +
    "\uffe9\030\uffe9\031\uffe9\032\uffe9\033\uffe9\034\uffe9\001\002" +
    "\000\004\012\107\001\002\000\004\012\104\001\002\000" +
    "\034\004\040\005\042\006\035\007\032\011\ufffe\022\037" +
    "\025\036\026\041\030\034\031\033\032\043\033\044\034" +
    "\031\001\002\000\040\002\000\010\000\012\000\014\000" +
    "\015\000\016\000\017\000\020\000\021\000\024\000\027" +
    "\000\035\000\036\000\037\000\040\000\001\002\000\004" +
    "\011\ufffa\001\002\000\036\004\uffeb\005\uffeb\006\uffeb\007" +
    "\uffeb\011\uffeb\013\uffeb\022\uffeb\025\uffeb\026\uffeb\030\uffeb" +
    "\031\uffeb\032\uffeb\033\uffeb\034\uffeb\001\002\000\004\012" +
    "\075\001\002\000\034\010\016\012\024\014\015\015\020" +
    "\016\007\017\010\020\017\021\004\027\022\035\014\036" +
    "\006\037\023\040\027\001\002\000\004\012\071\001\002" +
    "\000\004\012\066\001\002\000\040\002\064\010\016\012" +
    "\024\014\015\015\020\016\007\017\010\020\017\021\004" +
    "\024\013\027\022\035\014\036\006\037\023\040\025\001" +
    "\002\000\034\010\016\012\024\014\015\015\020\016\007" +
    "\017\010\020\017\021\004\027\022\035\014\036\006\037" +
    "\023\040\027\001\002\000\036\004\uffe8\005\uffe8\006\uffe8" +
    "\007\uffe8\011\uffe8\013\uffe8\022\uffe8\025\uffe8\026\uffe8\030" +
    "\uffe8\031\uffe8\032\uffe8\033\uffe8\034\uffe8\001\002\000\034" +
    "\010\016\012\024\014\015\015\020\016\007\017\010\020" +
    "\017\021\004\027\022\035\014\036\006\037\023\040\027" +
    "\001\002\000\036\004\uffea\005\uffea\006\uffea\007\uffea\011" +
    "\uffea\022\uffea\023\026\025\uffea\026\uffea\030\uffea\031\uffea" +
    "\032\uffea\033\uffea\034\uffea\001\002\000\034\010\016\012" +
    "\024\014\015\015\020\016\007\017\010\020\017\021\004" +
    "\027\022\035\014\036\006\037\023\040\027\001\002\000" +
    "\036\004\uffea\005\uffea\006\uffea\007\uffea\011\uffea\013\uffea" +
    "\022\uffea\025\uffea\026\uffea\030\uffea\031\uffea\032\uffea\033" +
    "\uffea\034\uffea\001\002\000\034\004\040\005\042\006\035" +
    "\007\032\011\uffdf\022\037\025\036\026\041\030\034\031" +
    "\033\032\043\033\044\034\031\001\002\000\034\010\016" +
    "\012\024\014\015\015\020\016\007\017\010\020\017\021" +
    "\004\027\022\035\014\036\006\037\023\040\027\001\002" +
    "\000\034\010\016\012\024\014\015\015\020\016\007\017" +
    "\010\020\017\021\004\027\022\035\014\036\006\037\023" +
    "\040\027\001\002\000\034\010\016\012\024\014\015\015" +
    "\020\016\007\017\010\020\017\021\004\027\022\035\014" +
    "\036\006\037\023\040\027\001\002\000\034\010\016\012" +
    "\024\014\015\015\020\016\007\017\010\020\017\021\004" +
    "\027\022\035\014\036\006\037\023\040\027\001\002\000" +
    "\034\010\016\012\024\014\015\015\020\016\007\017\010" +
    "\020\017\021\004\027\022\035\014\036\006\037\023\040" +
    "\027\001\002\000\034\010\016\012\024\014\015\015\020" +
    "\016\007\017\010\020\017\021\004\027\022\035\014\036" +
    "\006\037\023\040\027\001\002\000\034\010\016\012\024" +
    "\014\015\015\020\016\007\017\010\020\017\021\004\027" +
    "\022\035\014\036\006\037\023\040\027\001\002\000\034" +
    "\010\016\012\024\014\015\015\020\016\007\017\010\020" +
    "\017\021\004\027\022\035\014\036\006\037\023\040\027" +
    "\001\002\000\034\010\016\012\024\014\015\015\020\016" +
    "\007\017\010\020\017\021\004\027\022\035\014\036\006" +
    "\037\023\040\027\001\002\000\034\010\016\012\024\014" +
    "\015\015\020\016\007\017\010\020\017\021\004\027\022" +
    "\035\014\036\006\037\023\040\027\001\002\000\034\010" +
    "\016\012\024\014\015\015\020\016\007\017\010\020\017" +
    "\021\004\027\022\035\014\036\006\037\023\040\027\001" +
    "\002\000\034\010\016\012\024\014\015\015\020\016\007" +
    "\017\010\020\017\021\004\027\022\035\014\036\006\037" +
    "\023\040\027\001\002\000\036\004\uffe1\005\uffe1\006\uffe1" +
    "\007\uffe1\011\uffe1\013\uffe1\022\037\025\uffe1\026\uffe1\030" +
    "\uffe1\031\uffe1\032\uffe1\033\uffe1\034\uffe1\001\002\000\036" +
    "\004\uffe2\005\uffe2\006\uffe2\007\uffe2\011\uffe2\013\uffe2\022" +
    "\037\025\uffe2\026\uffe2\030\uffe2\031\uffe2\032\uffe2\033\uffe2" +
    "\034\uffe2\001\002\000\036\004\ufff7\005\ufff7\006\035\007" +
    "\032\011\ufff7\013\ufff7\022\037\025\ufff7\026\ufff7\030\034" +
    "\031\033\032\043\033\044\034\031\001\002\000\036\004" +
    "\uffe6\005\uffe6\006\035\007\032\011\uffe6\013\uffe6\022\037" +
    "\025\uffe6\026\uffe6\030\034\031\033\032\043\033\044\034" +
    "\031\001\002\000\036\004\ufff8\005\ufff8\006\035\007\032" +
    "\011\ufff8\013\ufff8\022\037\025\ufff8\026\ufff8\030\034\031" +
    "\033\032\043\033\044\034\031\001\002\000\036\004\uffed" +
    "\005\uffed\006\uffed\007\uffed\011\uffed\013\uffed\022\uffed\025" +
    "\uffed\026\uffed\030\uffed\031\uffed\032\uffed\033\uffed\034\uffed" +
    "\001\002\000\036\004\uffe7\005\uffe7\006\035\007\032\011" +
    "\uffe7\013\uffe7\022\037\025\uffe7\026\uffe7\030\034\031\033" +
    "\032\043\033\044\034\031\001\002\000\036\004\ufff6\005" +
    "\ufff6\006\ufff6\007\ufff6\011\ufff6\013\ufff6\022\037\025\ufff6" +
    "\026\ufff6\030\ufff6\031\ufff6\032\ufff6\033\ufff6\034\ufff6\001" +
    "\002\000\036\004\uffe4\005\uffe4\006\uffe4\007\uffe4\011\uffe4" +
    "\013\uffe4\022\037\025\uffe4\026\uffe4\030\uffe4\031\uffe4\032" +
    "\uffe4\033\uffe4\034\uffe4\001\002\000\036\004\uffe3\005\uffe3" +
    "\006\uffe3\007\uffe3\011\uffe3\013\uffe3\022\037\025\uffe3\026" +
    "\uffe3\030\uffe3\031\uffe3\032\uffe3\033\uffe3\034\uffe3\001\002" +
    "\000\036\004\ufff5\005\ufff5\006\ufff5\007\ufff5\011\ufff5\013" +
    "\ufff5\022\037\025\ufff5\026\ufff5\030\ufff5\031\ufff5\032\ufff5" +
    "\033\ufff5\034\ufff5\001\002\000\036\004\uffe0\005\uffe0\006" +
    "\uffe0\007\uffe0\011\uffe0\013\uffe0\022\037\025\uffe0\026\uffe0" +
    "\030\uffe0\031\uffe0\032\uffe0\033\uffe0\034\uffe0\001\002\000" +
    "\034\004\040\005\042\006\035\007\032\013\062\022\037" +
    "\025\036\026\041\030\034\031\033\032\043\033\044\034" +
    "\031\001\002\000\036\004\uffec\005\uffec\006\uffec\007\uffec" +
    "\011\uffec\013\uffec\022\uffec\025\uffec\026\uffec\030\uffec\031" +
    "\uffec\032\uffec\033\uffec\034\uffec\001\002\000\036\004\uffe5" +
    "\005\uffe5\006\uffe5\007\uffe5\011\uffe5\013\uffe5\022\037\025" +
    "\uffe5\026\uffe5\030\uffe5\031\uffe5\032\uffe5\033\uffe5\034\uffe5" +
    "\001\002\000\004\002\001\001\002\000\040\002\uffff\010" +
    "\uffff\012\uffff\014\uffff\015\uffff\016\uffff\017\uffff\020\uffff" +
    "\021\uffff\024\uffff\027\uffff\035\uffff\036\uffff\037\uffff\040" +
    "\uffff\001\002\000\034\010\016\012\024\014\015\015\020" +
    "\016\007\017\010\020\017\021\004\027\022\035\014\036" +
    "\006\037\023\040\027\001\002\000\034\004\040\005\042" +
    "\006\035\007\032\013\070\022\037\025\036\026\041\030" +
    "\034\031\033\032\043\033\044\034\031\001\002\000\036" +
    "\004\ufff2\005\ufff2\006\ufff2\007\ufff2\011\ufff2\013\ufff2\022" +
    "\ufff2\025\ufff2\026\ufff2\030\ufff2\031\ufff2\032\ufff2\033\ufff2" +
    "\034\ufff2\001\002\000\034\010\016\012\024\014\015\015" +
    "\020\016\007\017\010\020\017\021\004\027\022\035\014" +
    "\036\006\037\023\040\027\001\002\000\034\004\040\005" +
    "\042\006\035\007\032\013\073\022\037\025\036\026\041" +
    "\030\034\031\033\032\043\033\044\034\031\001\002\000" +
    "\036\004\uffef\005\uffef\006\uffef\007\uffef\011\uffef\013\uffef" +
    "\022\uffef\025\uffef\026\uffef\030\uffef\031\uffef\032\uffef\033" +
    "\uffef\034\uffef\001\002\000\036\004\ufff4\005\ufff4\006\ufff4" +
    "\007\ufff4\011\ufff4\013\ufff4\022\037\025\ufff4\026\ufff4\030" +
    "\ufff4\031\ufff4\032\ufff4\033\ufff4\034\ufff4\001\002\000\034" +
    "\010\016\012\024\014\015\015\020\016\007\017\010\020" +
    "\017\021\004\027\022\035\014\036\006\037\023\040\027" +
    "\001\002\000\034\004\040\005\042\006\035\007\032\013" +
    "\077\022\037\025\036\026\041\030\034\031\033\032\043" +
    "\033\044\034\031\001\002\000\036\004\ufff3\005\ufff3\006" +
    "\ufff3\007\ufff3\011\ufff3\013\ufff3\022\ufff3\025\ufff3\026\ufff3" +
    "\030\ufff3\031\ufff3\032\ufff3\033\ufff3\034\ufff3\001\002\000" +
    "\004\011\101\001\002\000\040\002\ufff9\010\ufff9\012\ufff9" +
    "\014\ufff9\015\ufff9\016\ufff9\017\ufff9\020\ufff9\021\ufff9\024" +
    "\ufff9\027\ufff9\035\ufff9\036\ufff9\037\ufff9\040\ufff9\001\002" +
    "\000\004\011\103\001\002\000\040\002\ufffd\010\ufffd\012" +
    "\ufffd\014\ufffd\015\ufffd\016\ufffd\017\ufffd\020\ufffd\021\ufffd" +
    "\024\ufffd\027\ufffd\035\ufffd\036\ufffd\037\ufffd\040\ufffd\001" +
    "\002\000\034\010\016\012\024\014\015\015\020\016\007" +
    "\017\010\020\017\021\004\027\022\035\014\036\006\037" +
    "\023\040\027\001\002\000\034\004\040\005\042\006\035" +
    "\007\032\013\106\022\037\025\036\026\041\030\034\031" +
    "\033\032\043\033\044\034\031\001\002\000\036\004\ufff0" +
    "\005\ufff0\006\ufff0\007\ufff0\011\ufff0\013\ufff0\022\ufff0\025" +
    "\ufff0\026\ufff0\030\ufff0\031\ufff0\032\ufff0\033\ufff0\034\ufff0" +
    "\001\002\000\034\010\016\012\024\014\015\015\020\016" +
    "\007\017\010\020\017\021\004\027\022\035\014\036\006" +
    "\037\023\040\027\001\002\000\034\004\040\005\042\006" +
    "\035\007\032\013\111\022\037\025\036\026\041\030\034" +
    "\031\033\032\043\033\044\034\031\001\002\000\036\004" +
    "\ufff1\005\ufff1\006\ufff1\007\ufff1\011\ufff1\013\ufff1\022\ufff1" +
    "\025\ufff1\026\ufff1\030\ufff1\031\ufff1\032\ufff1\033\ufff1\034" +
    "\ufff1\001\002\000\004\011\113\001\002\000\040\002\ufffb" +
    "\010\ufffb\012\ufffb\014\ufffb\015\ufffb\016\ufffb\017\ufffb\020" +
    "\ufffb\021\ufffb\024\ufffb\027\ufffb\035\ufffb\036\ufffb\037\ufffb" +
    "\040\ufffb\001\002\000\034\010\016\012\024\014\015\015" +
    "\020\016\007\017\010\020\017\021\004\027\022\035\014" +
    "\036\006\037\023\040\027\001\002\000\034\004\040\005" +
    "\042\006\035\007\032\013\116\022\037\025\036\026\041" +
    "\030\034\031\033\032\043\033\044\034\031\001\002\000" +
    "\036\004\uffee\005\uffee\006\uffee\007\uffee\011\uffee\013\uffee" +
    "\022\uffee\025\uffee\026\uffee\030\uffee\031\uffee\032\uffee\033" +
    "\uffee\034\uffee\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\114\000\012\002\020\003\011\004\010\005\004\001" +
    "\001\000\002\001\001\000\004\007\111\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\006" +
    "\101\001\001\000\002\001\001\000\004\010\077\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\004\073\001" +
    "\001\000\002\001\001\000\002\001\001\000\010\003\064" +
    "\004\010\005\004\001\001\000\004\004\062\001\001\000" +
    "\002\001\001\000\004\004\060\001\001\000\002\001\001" +
    "\000\004\004\027\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\004\057\001\001\000\004\004\056\001\001" +
    "\000\004\004\055\001\001\000\004\004\054\001\001\000" +
    "\004\004\053\001\001\000\004\004\052\001\001\000\004" +
    "\004\051\001\001\000\004\004\050\001\001\000\004\004" +
    "\047\001\001\000\004\004\046\001\001\000\004\004\045" +
    "\001\001\000\004\004\044\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\004\066\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\004\071\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\004\075\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\004\104\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\004\107" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\004\114\001\001\000\002" +
    "\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$Parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$Parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$Parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}


  /** User initialization code. */
  public void user_init() throws java.lang.Exception
    {

  // varMap.put("true", 1.0d);
  // varMap.put("false", 0.0d);

    }


  public static void main(String args[]) throws Exception {
    new Parser(new Lexer(new InputStreamReader(System.in))).parse();
  }

}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$Parser$actions {


  Map<String,Double> varMap = new HashMap<String,Double>();  
  static String TRUE = new String("true");
  static String FALSE = new String("false");
  static double ONE = 1.0d;
  static double ZERO = 0.0d;

  private final Parser parser;

  /** Constructor */
  CUP$Parser$actions(Parser parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$Parser$do_action(
    int                        CUP$Parser$act_num,
    java_cup.runtime.lr_parser CUP$Parser$parser,
    java.util.Stack            CUP$Parser$stack,
    int                        CUP$Parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$Parser$result;

      /* select the action based on the action number */
      switch (CUP$Parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // assignation ::= TK_ID TK_ASSIGN expression 
            {
              String RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int xright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		String x = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Double e1 = (Double)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 varMap.put(x, e1);
  RESULT = x + " = " + e1 ; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("assignation",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // expression ::= expression TK_EQUAL expression 
            {
              Double RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Double e1 = (Double)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Double e2 = (Double)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
    if(e1.equals(e2)) {
      RESULT = 1.0;
    } else {
      RESULT = 0.0;
    }
  
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expression",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // expression ::= expression TK_LOWEQ expression 
            {
              Double RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Double e1 = (Double)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Double e2 = (Double)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
    if(e1 <= e2) {
      RESULT = 1.0;
    } else {
      RESULT = 0.0;
    }
  
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expression",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // expression ::= expression TK_LOW expression 
            {
              Double RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Double e1 = (Double)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Double e2 = (Double)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
    if(e1 < e2) {
      RESULT = 1.0;
    } else {
      RESULT = 0.0;
    }
  
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expression",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // expression ::= expression TK_SUPEQ expression 
            {
              Double RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Double e1 = (Double)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Double e2 = (Double)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
    if(e1 >= e2) {
      RESULT = 1.0;
    } else {
      RESULT = 0.0;
    }
  
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expression",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // expression ::= expression TK_SUP expression 
            {
              Double RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Double e1 = (Double)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Double e2 = (Double)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
    if(e1 > e2) {
      RESULT = 1.0;
    } else {
      RESULT = 0.0;
    }
  
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expression",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // expression ::= TK_NOT expression 
            {
              Double RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Double e1 = (Double)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
    if(e1==1){
      RESULT = 0.0;
    } else {
      RESULT = 1.0;
    }
  
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expression",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // expression ::= expression TK_OR expression 
            {
              Double RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Double e1 = (Double)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Double e2 = (Double)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
    if(e1==1 || e2==1){
      RESULT = 1.0;
    } else {
      RESULT = 0.0;
    }
  
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expression",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // expression ::= expression TK_AND expression 
            {
              Double RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Double e1 = (Double)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Double e2 = (Double)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 
    if(e1==1.0 && e2==1.0){
      RESULT = 1.0;
    } else {
      RESULT = 0.0;
    }
  
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expression",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // expression ::= TK_E 
            {
              Double RESULT =null;
		 RESULT = Math.E; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expression",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // expression ::= TK_PI 
            {
              Double RESULT =null;
		 RESULT = Math.PI; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expression",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // expression ::= TK_ID 
            {
              Double RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int xright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String x = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 
    if(varMap.containsKey(x)){
      RESULT = varMap.get(x) ;
    } else {
      System.out.println("# " + x + " n'est pas défini");
    }
  
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expression",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // expression ::= TK_VAL 
            {
              Double RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Double v = (Double)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = v; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expression",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // expression ::= TK_OPBRA expression TK_CLBRA 
            {
              Double RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Double e1 = (Double)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = e1 ; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expression",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // expression ::= expression TK_POW expression 
            {
              Double RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Double e1 = (Double)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Double e2 = (Double)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = Math.pow(e1,e2); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expression",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // expression ::= TK_EXP TK_OPBRA expression TK_CLBRA 
            {
              Double RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Double e1 = (Double)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = Math.exp(e1); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expression",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // expression ::= TK_LN TK_OPBRA expression TK_CLBRA 
            {
              Double RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Double e1 = (Double)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = Math.log(e1); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expression",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // expression ::= TK_SQRT TK_OPBRA expression TK_CLBRA 
            {
              Double RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Double e1 = (Double)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = Math.sqrt(e1); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expression",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // expression ::= TK_TAN TK_OPBRA expression TK_CLBRA 
            {
              Double RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Double e1 = (Double)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = Math.tan(e1); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expression",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // expression ::= TK_COS TK_OPBRA expression TK_CLBRA 
            {
              Double RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Double e1 = (Double)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = Math.cos(e1); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expression",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // expression ::= TK_SIN TK_OPBRA expression TK_CLBRA 
            {
              Double RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Double e1 = (Double)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = Math.sin(e1); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expression",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // expression ::= TK_UMINUS expression 
            {
              Double RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Double e1 = (Double)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = -e1 ; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expression",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // expression ::= expression TK_DIV expression 
            {
              Double RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Double e1 = (Double)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Double e2 = (Double)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = e1 / e2 ; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expression",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // expression ::= expression TK_MULT expression 
            {
              Double RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Double e1 = (Double)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Double e2 = (Double)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = e1 * e2 ; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expression",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // expression ::= expression TK_MINUS expression 
            {
              Double RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Double e1 = (Double)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Double e2 = (Double)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = e1 - e2 ; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expression",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // expression ::= expression TK_PLUS expression 
            {
              Double RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Double e1 = (Double)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Double e2 = (Double)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = e1 + e2 ; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expression",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // commande ::= TK_ALLVAR NT$2 TK_DONE 
            {
              Object RESULT =null;
              // propagate RESULT from NT$2
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("commande",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // NT$2 ::= 
            {
              Object RESULT =null;
  
    long i=0;
    Iterator<Map.Entry<String,Double>> it = varMap.entrySet().iterator();
    if(!it.hasNext()){
      System.out.println("Aucune variable définie");
    }
    while(it.hasNext()){
      Map.Entry<String,Double> pair = it.next();
      System.out.println("# " + pair.getKey() + " = " + pair.getValue());
    }
  
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("NT$2",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // commande ::= assignation NT$1 TK_DONE 
            {
              Object RESULT =null;
              // propagate RESULT from NT$1
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("commande",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // NT$1 ::= 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
 System.out.println("# " + a); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("NT$1",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // commande ::= expression NT$0 TK_DONE 
            {
              Object RESULT =null;
              // propagate RESULT from NT$0
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Double e = (Double)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("commande",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // NT$0 ::= 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Double e = (Double)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
 System.out.println("# " + e); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("NT$0",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // commandes ::= commandes commande 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("commandes",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // commandes ::= commande 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("commandes",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= commandes EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		RESULT = start_val;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$Parser$parser.done_parsing();
          return CUP$Parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

