
//----------------------------------------------------
// The following code was generated by CUP v0.11a beta 20060608
// Wed Sep 27 10:32:25 CEST 2017
//----------------------------------------------------

import java_cup.runtime.*;
import java.util.*;
import java.io.*;
import java.lang.Math;

/** CUP v0.11a beta 20060608 generated parser.
  * @version Wed Sep 27 10:32:25 CEST 2017
  */
public class Parser extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public Parser() {super();}

  /** Constructor which sets the default scanner. */
  public Parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public Parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\053\000\002\002\004\000\002\002\003\000\002\002" +
    "\004\000\002\006\002\000\002\002\005\000\002\007\002" +
    "\000\002\003\005\000\002\010\002\000\002\003\005\000" +
    "\002\011\002\000\002\003\005\000\002\012\002\000\002" +
    "\003\005\000\002\004\005\000\002\004\005\000\002\004" +
    "\005\000\002\004\005\000\002\004\004\000\002\004\006" +
    "\000\002\004\006\000\002\004\006\000\002\004\006\000" +
    "\002\004\006\000\002\004\006\000\002\004\005\000\002" +
    "\004\005\000\002\004\003\000\002\004\003\000\002\004" +
    "\003\000\002\004\003\000\002\004\005\000\002\004\005" +
    "\000\002\004\004\000\002\004\005\000\002\004\005\000" +
    "\002\004\005\000\002\004\005\000\002\004\005\000\002" +
    "\004\007\000\002\005\005\000\002\005\005\000\002\005" +
    "\005\000\002\005\005" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\134\000\042\003\017\010\020\012\026\014\016\015" +
    "\022\016\010\017\011\020\021\021\004\027\014\032\024" +
    "\040\007\043\015\044\006\045\025\046\027\001\002\000" +
    "\004\012\134\001\002\000\004\011\ufffa\001\002\000\042" +
    "\004\uffe5\005\uffe5\006\uffe5\007\uffe5\011\uffe5\013\uffe5\022" +
    "\uffe5\030\uffe5\031\uffe5\033\uffe5\034\uffe5\035\uffe5\036\uffe5" +
    "\037\uffe5\041\uffe5\042\uffe5\001\002\000\004\011\ufff6\001" +
    "\002\000\004\012\125\001\002\000\004\012\122\001\002" +
    "\000\036\004\046\005\051\006\042\007\037\011\ufffc\022" +
    "\045\030\044\031\047\033\043\034\040\035\050\036\052" +
    "\037\036\041\041\001\002\000\042\002\000\010\000\012" +
    "\000\014\000\015\000\016\000\017\000\020\000\021\000" +
    "\027\000\032\000\040\000\043\000\044\000\045\000\046" +
    "\000\001\002\000\004\011\ufff8\001\002\000\042\004\uffe7" +
    "\005\uffe7\006\uffe7\007\uffe7\011\uffe7\013\uffe7\022\uffe7\030" +
    "\uffe7\031\uffe7\033\uffe7\034\uffe7\035\uffe7\036\uffe7\037\uffe7" +
    "\041\uffe7\042\uffe7\001\002\000\004\012\113\001\002\000" +
    "\004\011\ufffe\001\002\000\034\010\020\012\026\014\016" +
    "\015\022\016\010\017\011\020\021\021\004\032\024\043" +
    "\015\044\006\045\025\046\034\001\002\000\004\012\105" +
    "\001\002\000\004\012\102\001\002\000\042\002\100\010" +
    "\020\012\026\014\016\015\022\016\010\017\011\020\021" +
    "\021\004\027\014\032\024\040\007\043\015\044\006\045" +
    "\025\046\027\001\002\000\034\010\020\012\026\014\016" +
    "\015\022\016\010\017\011\020\021\021\004\032\024\043" +
    "\015\044\006\045\025\046\034\001\002\000\042\004\uffe4" +
    "\005\uffe4\006\uffe4\007\uffe4\011\uffe4\013\uffe4\022\uffe4\030" +
    "\uffe4\031\uffe4\033\uffe4\034\uffe4\035\uffe4\036\uffe4\037\uffe4" +
    "\041\uffe4\042\uffe4\001\002\000\034\010\020\012\026\014" +
    "\016\015\022\016\010\017\011\020\021\021\004\032\024" +
    "\043\015\044\006\045\025\046\034\001\002\000\046\004" +
    "\uffe6\005\uffe6\006\uffe6\007\uffe6\011\uffe6\022\uffe6\023\032" +
    "\024\031\025\033\026\030\030\uffe6\031\uffe6\033\uffe6\034" +
    "\uffe6\035\uffe6\036\uffe6\037\uffe6\041\uffe6\001\002\000\034" +
    "\010\020\012\026\014\016\015\022\016\010\017\011\020" +
    "\021\021\004\032\024\043\015\044\006\045\025\046\034" +
    "\001\002\000\034\010\020\012\026\014\016\015\022\016" +
    "\010\017\011\020\021\021\004\032\024\043\015\044\006" +
    "\045\025\046\034\001\002\000\034\010\020\012\026\014" +
    "\016\015\022\016\010\017\011\020\021\021\004\032\024" +
    "\043\015\044\006\045\025\046\034\001\002\000\034\010" +
    "\020\012\026\014\016\015\022\016\010\017\011\020\021" +
    "\021\004\032\024\043\015\044\006\045\025\046\034\001" +
    "\002\000\042\004\uffe6\005\uffe6\006\uffe6\007\uffe6\011\uffe6" +
    "\013\uffe6\022\uffe6\030\uffe6\031\uffe6\033\uffe6\034\uffe6\035" +
    "\uffe6\036\uffe6\037\uffe6\041\uffe6\042\uffe6\001\002\000\036" +
    "\004\046\005\051\006\042\007\037\011\uffd8\022\045\030" +
    "\044\031\047\033\043\034\040\035\050\036\052\037\036" +
    "\041\041\001\002\000\034\010\020\012\026\014\016\015" +
    "\022\016\010\017\011\020\021\021\004\032\024\043\015" +
    "\044\006\045\025\046\034\001\002\000\034\010\020\012" +
    "\026\014\016\015\022\016\010\017\011\020\021\021\004" +
    "\032\024\043\015\044\006\045\025\046\034\001\002\000" +
    "\034\010\020\012\026\014\016\015\022\016\010\017\011" +
    "\020\021\021\004\032\024\043\015\044\006\045\025\046" +
    "\034\001\002\000\034\010\020\012\026\014\016\015\022" +
    "\016\010\017\011\020\021\021\004\032\024\043\015\044" +
    "\006\045\025\046\034\001\002\000\034\010\020\012\026" +
    "\014\016\015\022\016\010\017\011\020\021\021\004\032" +
    "\024\043\015\044\006\045\025\046\034\001\002\000\034" +
    "\010\020\012\026\014\016\015\022\016\010\017\011\020" +
    "\021\021\004\032\024\043\015\044\006\045\025\046\034" +
    "\001\002\000\034\010\020\012\026\014\016\015\022\016" +
    "\010\017\011\020\021\021\004\032\024\043\015\044\006" +
    "\045\025\046\034\001\002\000\034\010\020\012\026\014" +
    "\016\015\022\016\010\017\011\020\021\021\004\032\024" +
    "\043\015\044\006\045\025\046\034\001\002\000\034\010" +
    "\020\012\026\014\016\015\022\016\010\017\011\020\021" +
    "\021\004\032\024\043\015\044\006\045\025\046\034\001" +
    "\002\000\034\010\020\012\026\014\016\015\022\016\010" +
    "\017\011\020\021\021\004\032\024\043\015\044\006\045" +
    "\025\046\034\001\002\000\034\010\020\012\026\014\016" +
    "\015\022\016\010\017\011\020\021\021\004\032\024\043" +
    "\015\044\006\045\025\046\034\001\002\000\034\010\020" +
    "\012\026\014\016\015\022\016\010\017\011\020\021\021" +
    "\004\032\024\043\015\044\006\045\025\046\034\001\002" +
    "\000\034\010\020\012\026\014\016\015\022\016\010\017" +
    "\011\020\021\021\004\032\024\043\015\044\006\045\025" +
    "\046\034\001\002\000\042\004\uffdd\005\uffdd\006\uffdd\007" +
    "\uffdd\011\uffdd\013\uffdd\022\045\030\uffdd\031\uffdd\033\uffdd" +
    "\034\uffdd\035\uffdd\036\uffdd\037\uffdd\041\041\042\uffdd\001" +
    "\002\000\042\004\ufff3\005\ufff3\006\042\007\037\011\ufff3" +
    "\013\ufff3\022\045\030\ufff3\031\ufff3\033\043\034\040\035" +
    "\050\036\052\037\036\041\041\042\ufff3\001\002\000\042" +
    "\004\uffde\005\uffde\006\uffde\007\uffde\011\uffde\013\uffde\022" +
    "\045\030\uffde\031\uffde\033\uffde\034\uffde\035\uffde\036\uffde" +
    "\037\uffde\041\041\042\uffde\001\002\000\042\004\uffe2\005" +
    "\uffe2\006\042\007\037\011\uffe2\013\uffe2\022\045\030\uffe2" +
    "\031\uffe2\033\043\034\040\035\050\036\052\037\036\041" +
    "\041\042\uffe2\001\002\000\042\004\ufff4\005\ufff4\006\042" +
    "\007\037\011\ufff4\013\ufff4\022\045\030\ufff4\031\ufff4\033" +
    "\043\034\040\035\050\036\052\037\036\041\041\042\ufff4" +
    "\001\002\000\042\004\uffe9\005\uffe9\006\uffe9\007\uffe9\011" +
    "\uffe9\013\uffe9\022\uffe9\030\uffe9\031\uffe9\033\uffe9\034\uffe9" +
    "\035\uffe9\036\uffe9\037\uffe9\041\uffe9\042\uffe9\001\002\000" +
    "\042\004\uffe3\005\uffe3\006\042\007\037\011\uffe3\013\uffe3" +
    "\022\045\030\uffe3\031\uffe3\033\043\034\040\035\050\036" +
    "\052\037\036\041\041\042\uffe3\001\002\000\042\004\uffe0" +
    "\005\uffe0\006\uffe0\007\uffe0\011\uffe0\013\uffe0\022\045\030" +
    "\uffe0\031\uffe0\033\uffe0\034\uffe0\035\uffe0\036\uffe0\037\uffe0" +
    "\041\041\042\uffe0\001\002\000\042\004\ufff2\005\ufff2\006" +
    "\ufff2\007\ufff2\011\ufff2\013\ufff2\022\045\030\ufff2\031\ufff2" +
    "\033\ufff2\034\ufff2\035\ufff2\036\ufff2\037\ufff2\041\041\042" +
    "\ufff2\001\002\000\036\004\046\005\051\006\042\007\037" +
    "\022\045\030\044\031\047\033\043\034\040\035\050\036" +
    "\052\037\036\041\041\042\065\001\002\000\034\010\020" +
    "\012\026\014\016\015\022\016\010\017\011\020\021\021" +
    "\004\032\024\043\015\044\006\045\025\046\034\001\002" +
    "\000\042\004\046\005\051\006\042\007\037\011\uffdb\013" +
    "\uffdb\022\045\030\044\031\047\033\043\034\040\035\050" +
    "\036\052\037\036\041\041\042\uffdb\001\002\000\042\004" +
    "\uffdf\005\uffdf\006\uffdf\007\uffdf\011\uffdf\013\uffdf\022\045" +
    "\030\uffdf\031\uffdf\033\uffdf\034\uffdf\035\uffdf\036\uffdf\037" +
    "\uffdf\041\041\042\uffdf\001\002\000\042\004\ufff1\005\ufff1" +
    "\006\ufff1\007\ufff1\011\ufff1\013\ufff1\022\045\030\ufff1\031" +
    "\ufff1\033\ufff1\034\ufff1\035\ufff1\036\ufff1\037\ufff1\041\041" +
    "\042\ufff1\001\002\000\042\004\uffdc\005\uffdc\006\uffdc\007" +
    "\uffdc\011\uffdc\013\uffdc\022\045\030\uffdc\031\uffdc\033\uffdc" +
    "\034\uffdc\035\uffdc\036\uffdc\037\uffdc\041\041\042\uffdc\001" +
    "\002\000\036\004\046\005\051\006\042\007\037\011\uffda" +
    "\022\045\030\044\031\047\033\043\034\040\035\050\036" +
    "\052\037\036\041\041\001\002\000\036\004\046\005\051" +
    "\006\042\007\037\011\uffd9\022\045\030\044\031\047\033" +
    "\043\034\040\035\050\036\052\037\036\041\041\001\002" +
    "\000\036\004\046\005\051\006\042\007\037\011\uffd7\022" +
    "\045\030\044\031\047\033\043\034\040\035\050\036\052" +
    "\037\036\041\041\001\002\000\036\004\046\005\051\006" +
    "\042\007\037\013\076\022\045\030\044\031\047\033\043" +
    "\034\040\035\050\036\052\037\036\041\041\001\002\000" +
    "\042\004\uffe8\005\uffe8\006\uffe8\007\uffe8\011\uffe8\013\uffe8" +
    "\022\uffe8\030\uffe8\031\uffe8\033\uffe8\034\uffe8\035\uffe8\036" +
    "\uffe8\037\uffe8\041\uffe8\042\uffe8\001\002\000\042\004\uffe1" +
    "\005\uffe1\006\uffe1\007\uffe1\011\uffe1\013\uffe1\022\045\030" +
    "\uffe1\031\uffe1\033\uffe1\034\uffe1\035\uffe1\036\uffe1\037\uffe1" +
    "\041\041\042\uffe1\001\002\000\004\002\001\001\002\000" +
    "\042\002\uffff\010\uffff\012\uffff\014\uffff\015\uffff\016\uffff" +
    "\017\uffff\020\uffff\021\uffff\027\uffff\032\uffff\040\uffff\043" +
    "\uffff\044\uffff\045\uffff\046\uffff\001\002\000\034\010\020" +
    "\012\026\014\016\015\022\016\010\017\011\020\021\021" +
    "\004\032\024\043\015\044\006\045\025\046\034\001\002" +
    "\000\036\004\046\005\051\006\042\007\037\013\104\022" +
    "\045\030\044\031\047\033\043\034\040\035\050\036\052" +
    "\037\036\041\041\001\002\000\042\004\uffee\005\uffee\006" +
    "\uffee\007\uffee\011\uffee\013\uffee\022\uffee\030\uffee\031\uffee" +
    "\033\uffee\034\uffee\035\uffee\036\uffee\037\uffee\041\uffee\042" +
    "\uffee\001\002\000\034\010\020\012\026\014\016\015\022" +
    "\016\010\017\011\020\021\021\004\032\024\043\015\044" +
    "\006\045\025\046\034\001\002\000\036\004\046\005\051" +
    "\006\042\007\037\013\107\022\045\030\044\031\047\033" +
    "\043\034\040\035\050\036\052\037\036\041\041\001\002" +
    "\000\042\004\uffeb\005\uffeb\006\uffeb\007\uffeb\011\uffeb\013" +
    "\uffeb\022\uffeb\030\uffeb\031\uffeb\033\uffeb\034\uffeb\035\uffeb" +
    "\036\uffeb\037\uffeb\041\uffeb\042\uffeb\001\002\000\042\004" +
    "\ufff0\005\ufff0\006\ufff0\007\ufff0\011\ufff0\013\ufff0\022\045" +
    "\030\ufff0\031\ufff0\033\ufff0\034\ufff0\035\ufff0\036\ufff0\037" +
    "\ufff0\041\041\042\ufff0\001\002\000\004\011\112\001\002" +
    "\000\042\002\ufffd\010\ufffd\012\ufffd\014\ufffd\015\ufffd\016" +
    "\ufffd\017\ufffd\020\ufffd\021\ufffd\027\ufffd\032\ufffd\040\ufffd" +
    "\043\ufffd\044\ufffd\045\ufffd\046\ufffd\001\002\000\034\010" +
    "\020\012\026\014\016\015\022\016\010\017\011\020\021" +
    "\021\004\032\024\043\015\044\006\045\025\046\034\001" +
    "\002\000\036\004\046\005\051\006\042\007\037\013\115" +
    "\022\045\030\044\031\047\033\043\034\040\035\050\036" +
    "\052\037\036\041\041\001\002\000\042\004\uffef\005\uffef" +
    "\006\uffef\007\uffef\011\uffef\013\uffef\022\uffef\030\uffef\031" +
    "\uffef\033\uffef\034\uffef\035\uffef\036\uffef\037\uffef\041\uffef" +
    "\042\uffef\001\002\000\004\011\117\001\002\000\042\002" +
    "\ufff7\010\ufff7\012\ufff7\014\ufff7\015\ufff7\016\ufff7\017\ufff7" +
    "\020\ufff7\021\ufff7\027\ufff7\032\ufff7\040\ufff7\043\ufff7\044" +
    "\ufff7\045\ufff7\046\ufff7\001\002\000\004\011\121\001\002" +
    "\000\042\002\ufffb\010\ufffb\012\ufffb\014\ufffb\015\ufffb\016" +
    "\ufffb\017\ufffb\020\ufffb\021\ufffb\027\ufffb\032\ufffb\040\ufffb" +
    "\043\ufffb\044\ufffb\045\ufffb\046\ufffb\001\002\000\034\010" +
    "\020\012\026\014\016\015\022\016\010\017\011\020\021" +
    "\021\004\032\024\043\015\044\006\045\025\046\034\001" +
    "\002\000\036\004\046\005\051\006\042\007\037\013\124" +
    "\022\045\030\044\031\047\033\043\034\040\035\050\036" +
    "\052\037\036\041\041\001\002\000\042\004\uffec\005\uffec" +
    "\006\uffec\007\uffec\011\uffec\013\uffec\022\uffec\030\uffec\031" +
    "\uffec\033\uffec\034\uffec\035\uffec\036\uffec\037\uffec\041\uffec" +
    "\042\uffec\001\002\000\034\010\020\012\026\014\016\015" +
    "\022\016\010\017\011\020\021\021\004\032\024\043\015" +
    "\044\006\045\025\046\034\001\002\000\036\004\046\005" +
    "\051\006\042\007\037\013\127\022\045\030\044\031\047" +
    "\033\043\034\040\035\050\036\052\037\036\041\041\001" +
    "\002\000\042\004\uffed\005\uffed\006\uffed\007\uffed\011\uffed" +
    "\013\uffed\022\uffed\030\uffed\031\uffed\033\uffed\034\uffed\035" +
    "\uffed\036\uffed\037\uffed\041\uffed\042\uffed\001\002\000\004" +
    "\011\131\001\002\000\042\002\ufff5\010\ufff5\012\ufff5\014" +
    "\ufff5\015\ufff5\016\ufff5\017\ufff5\020\ufff5\021\ufff5\027\ufff5" +
    "\032\ufff5\040\ufff5\043\ufff5\044\ufff5\045\ufff5\046\ufff5\001" +
    "\002\000\004\011\133\001\002\000\042\002\ufff9\010\ufff9" +
    "\012\ufff9\014\ufff9\015\ufff9\016\ufff9\017\ufff9\020\ufff9\021" +
    "\ufff9\027\ufff9\032\ufff9\040\ufff9\043\ufff9\044\ufff9\045\ufff9" +
    "\046\ufff9\001\002\000\034\010\020\012\026\014\016\015" +
    "\022\016\010\017\011\020\021\021\004\032\024\043\015" +
    "\044\006\045\025\046\034\001\002\000\036\004\046\005" +
    "\051\006\042\007\037\013\136\022\045\030\044\031\047" +
    "\033\043\034\040\035\050\036\052\037\036\041\041\001" +
    "\002\000\042\004\uffea\005\uffea\006\uffea\007\uffea\011\uffea" +
    "\013\uffea\022\uffea\030\uffea\031\uffea\033\uffea\034\uffea\035" +
    "\uffea\036\uffea\037\uffea\041\uffea\042\uffea\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\134\000\012\002\022\003\012\004\011\005\004\001" +
    "\001\000\002\001\001\000\004\010\131\001\001\000\002" +
    "\001\001\000\004\012\127\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\007\117\001\001\000\002\001\001" +
    "\000\004\011\115\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\006\110\001\001\000\004\004\107\001\001" +
    "\000\002\001\001\000\002\001\001\000\010\003\100\004" +
    "\011\005\004\001\001\000\004\004\076\001\001\000\002" +
    "\001\001\000\004\004\074\001\001\000\002\001\001\000" +
    "\004\004\073\001\001\000\004\004\072\001\001\000\004" +
    "\004\071\001\001\000\004\004\034\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\004\070\001\001\000\004" +
    "\004\067\001\001\000\004\004\066\001\001\000\004\004" +
    "\063\001\001\000\004\004\062\001\001\000\004\004\061" +
    "\001\001\000\004\004\060\001\001\000\004\004\057\001" +
    "\001\000\004\004\056\001\001\000\004\004\055\001\001" +
    "\000\004\004\054\001\001\000\004\004\053\001\001\000" +
    "\004\004\052\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\004\065\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\004\102\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\004\105" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\004\113" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\004\122\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\004\125\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\004\134\001\001\000\002" +
    "\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$Parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$Parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$Parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}


  /** User initialization code. */
  public void user_init() throws java.lang.Exception
    {

  //varMap.put("true", 1.0d);
  //varMap.put("false", 0.0d);

    }


  public static void main(String args[]) throws Exception {
    new Parser(new Lexer(new InputStreamReader(System.in))).parse();
  }

}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$Parser$actions {


  Map<String,Double> varMap = new HashMap<String,Double>();  
  static String TRUE = new String("true");
  static String FALSE = new String("false");
  static double ONE = 1.0d;
  static double ZERO = 0.0d;

  private final Parser parser;

  /** Constructor */
  CUP$Parser$actions(Parser parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$Parser$do_action(
    int                        CUP$Parser$act_num,
    java_cup.runtime.lr_parser CUP$Parser$parser,
    java.util.Stack            CUP$Parser$stack,
    int                        CUP$Parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$Parser$result;

      /* select the action based on the action number */
      switch (CUP$Parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // assignation ::= TK_ID TK_ASSIGNMULT expression 
            {
              String RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int xright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		String x = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Double e1 = (Double)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
    double initialValue = varMap.get(x);
    varMap.put(x, initialValue * e1);
    RESULT = x + " = " + (initialValue * e1);
  
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("assignation",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // assignation ::= TK_ID TK_ASSIGNMINUS expression 
            {
              String RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int xright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		String x = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Double e1 = (Double)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
    double initialValue = varMap.get(x);
    varMap.put(x, initialValue - e1);
    RESULT = x + " = " + (initialValue - e1);
  
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("assignation",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // assignation ::= TK_ID TK_ASSIGNPLUS expression 
            {
              String RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int xright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		String x = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Double e1 = (Double)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
    double initialValue = varMap.get(x);
    varMap.put(x, initialValue + e1);
    RESULT = x + " = " + (initialValue + e1);
  
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("assignation",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // assignation ::= TK_ID TK_ASSIGN expression 
            {
              String RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int xright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		String x = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Double e1 = (Double)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 varMap.put(x, e1);
  RESULT = x + " = " + e1 ; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("assignation",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // expression ::= expression TK_CONDI expression TK_CONDI2 expression 
            {
              Double RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		Double e1 = (Double)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Double e2 = (Double)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int e3left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int e3right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Double e3 = (Double)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
    if(e1.equals(1.0)) {
      RESULT = e2;
    } else {
      RESULT = e3;
    }
  
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expression",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // expression ::= expression TK_EQUAL expression 
            {
              Double RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Double e1 = (Double)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Double e2 = (Double)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
    if(e1.equals(e2)) {
      RESULT = 1.0;
    } else {
      RESULT = 0.0;
    }
  
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expression",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // expression ::= expression TK_LOWEQ expression 
            {
              Double RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Double e1 = (Double)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Double e2 = (Double)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
    if(e1 <= e2) {
      RESULT = 1.0;
    } else {
      RESULT = 0.0;
    }
  
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expression",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // expression ::= expression TK_LOW expression 
            {
              Double RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Double e1 = (Double)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Double e2 = (Double)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
    if(e1 < e2) {
      RESULT = 1.0;
    } else {
      RESULT = 0.0;
    }
  
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expression",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // expression ::= expression TK_SUPEQ expression 
            {
              Double RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Double e1 = (Double)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Double e2 = (Double)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
    if(e1 >= e2) {
      RESULT = 1.0;
    } else {
      RESULT = 0.0;
    }
  
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expression",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // expression ::= expression TK_SUP expression 
            {
              Double RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Double e1 = (Double)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Double e2 = (Double)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
    if(e1 > e2) {
      RESULT = 1.0;
    } else {
      RESULT = 0.0;
    }
  
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expression",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // expression ::= TK_NOT expression 
            {
              Double RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Double e1 = (Double)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
    if(e1==1){
      RESULT = 0.0;
    } else {
      RESULT = 1.0;
    }
  
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expression",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // expression ::= expression TK_OR expression 
            {
              Double RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Double e1 = (Double)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Double e2 = (Double)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
    if(e1==1 || e2==1){
      RESULT = 1.0;
    } else {
      RESULT = 0.0;
    }
  
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expression",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // expression ::= expression TK_AND expression 
            {
              Double RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Double e1 = (Double)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Double e2 = (Double)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 
    if(e1==1.0 && e2==1.0){
      RESULT = 1.0;
    } else {
      RESULT = 0.0;
    }
  
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expression",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // expression ::= TK_E 
            {
              Double RESULT =null;
		 RESULT = Math.E; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expression",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // expression ::= TK_PI 
            {
              Double RESULT =null;
		 RESULT = Math.PI; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expression",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // expression ::= TK_ID 
            {
              Double RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int xright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String x = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 
    if(varMap.containsKey(x)){
      RESULT = varMap.get(x) ;
    } else {
      System.out.println("# " + x + " n'est pas défini");
    }
  
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expression",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // expression ::= TK_VAL 
            {
              Double RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Double v = (Double)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = v; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expression",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // expression ::= TK_OPBRA expression TK_CLBRA 
            {
              Double RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Double e1 = (Double)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = e1 ; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expression",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // expression ::= expression TK_POW expression 
            {
              Double RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Double e1 = (Double)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Double e2 = (Double)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = Math.pow(e1,e2); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expression",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // expression ::= TK_EXP TK_OPBRA expression TK_CLBRA 
            {
              Double RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Double e1 = (Double)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = Math.exp(e1); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expression",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // expression ::= TK_LN TK_OPBRA expression TK_CLBRA 
            {
              Double RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Double e1 = (Double)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = Math.log(e1); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expression",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // expression ::= TK_SQRT TK_OPBRA expression TK_CLBRA 
            {
              Double RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Double e1 = (Double)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = Math.sqrt(e1); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expression",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // expression ::= TK_TAN TK_OPBRA expression TK_CLBRA 
            {
              Double RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Double e1 = (Double)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = Math.tan(e1); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expression",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // expression ::= TK_COS TK_OPBRA expression TK_CLBRA 
            {
              Double RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Double e1 = (Double)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = Math.cos(e1); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expression",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // expression ::= TK_SIN TK_OPBRA expression TK_CLBRA 
            {
              Double RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Double e1 = (Double)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = Math.sin(e1); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expression",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // expression ::= TK_UMINUS expression 
            {
              Double RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Double e1 = (Double)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = -e1 ; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expression",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // expression ::= expression TK_DIV expression 
            {
              Double RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Double e1 = (Double)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Double e2 = (Double)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = e1 / e2 ; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expression",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // expression ::= expression TK_MULT expression 
            {
              Double RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Double e1 = (Double)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Double e2 = (Double)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = e1 * e2 ; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expression",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // expression ::= expression TK_MINUS expression 
            {
              Double RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Double e1 = (Double)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Double e2 = (Double)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = e1 - e2 ; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expression",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // expression ::= expression TK_PLUS expression 
            {
              Double RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Double e1 = (Double)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Double e2 = (Double)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = e1 + e2 ; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expression",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // commande ::= TK_EXIT NT$4 TK_DONE 
            {
              Object RESULT =null;
              // propagate RESULT from NT$4
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("commande",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // NT$4 ::= 
            {
              Object RESULT =null;

    System.exit(0);
  
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("NT$4",8, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // commande ::= TK_ALLVAR NT$3 TK_DONE 
            {
              Object RESULT =null;
              // propagate RESULT from NT$3
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("commande",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // NT$3 ::= 
            {
              Object RESULT =null;
  
    long i=0;
    Iterator<Map.Entry<String,Double>> it = varMap.entrySet().iterator();
    if(!it.hasNext()){
      System.out.println("Aucune variable définie");
    }
    while(it.hasNext()){
      Map.Entry<String,Double> pair = it.next();
      System.out.println("# " + pair.getKey() + " = " + pair.getValue());
    }
  
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("NT$3",7, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // commande ::= assignation NT$2 TK_DONE 
            {
              Object RESULT =null;
              // propagate RESULT from NT$2
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("commande",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // NT$2 ::= 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
 System.out.println("# " + a); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("NT$2",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // commande ::= expression NT$1 TK_DONE 
            {
              Object RESULT =null;
              // propagate RESULT from NT$1
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Double e = (Double)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("commande",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // NT$1 ::= 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Double e = (Double)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
 System.out.println("# " + e); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("NT$1",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // commandes ::= error NT$0 TK_DONE 
            {
              Object RESULT =null;
              // propagate RESULT from NT$0
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("commandes",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // NT$0 ::= 
            {
              Object RESULT =null;
 System.out.println("Expression incorrecte"); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("NT$0",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // commandes ::= commandes commande 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("commandes",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // commandes ::= commande 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("commandes",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= commandes EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		RESULT = start_val;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$Parser$parser.done_parsing();
          return CUP$Parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

